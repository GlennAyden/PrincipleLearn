// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String            @id @default(cuid())
  email                 String            @unique
  passwordHash          String
  role                  Role              @default(USER)
  isVerified            Boolean           @default(false)
  verificationToken     String?
  verificationExpires   DateTime?
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?
  lastLogin             DateTime?
  failedLoginAttempts   Int               @default(0)
  lockedUntil           DateTime?
  refreshToken          String?
  refreshTokenExpires   DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  generateCourses       GenerateCourse[]
  transcriptQnas        TranscriptQna[]
  soalOtomatis          SoalOtomatis[]
  jurnalRefleksis       JurnalRefleksi[]
  quizAttempts          QuizAttempt[]
}

model GenerateCourse {
  id          String   @id @default(cuid())
  courseName  String
  parameter   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model TranscriptQna {
  id          String   @id @default(cuid())
  question    String
  answer      String
  courseId    String
  subtopic    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model SoalOtomatis {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model JurnalRefleksi {
  id          String   @id @default(cuid())
  content     String   // isi lengkap jurnal refleksi
  courseId    String
  subtopic    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model QuizAttempt {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  score         Int
  courseId      String
  subtopic      String
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  answers       QuizAnswer[]
}

model QuizAnswer {
  id             String       @id @default(cuid())
  question       String
  options        String[]
  userAnswer     String
  isCorrect      Boolean
  questionIndex  Int
  quizAttempt    QuizAttempt  @relation(fields: [quizAttemptId], references: [id])
  quizAttemptId  String
}

enum Role {
  USER
  ADMIN
}
